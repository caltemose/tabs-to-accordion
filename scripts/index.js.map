{"version":3,"file":"index.js","sources":["../../src/scripts/TabsToAccordion.js","../../src/scripts/index.js"],"sourcesContent":["/**\n * @author Chad L. Altemose (twitter || github ->  @caltemose)\n *\n * Class to create a Tabs-to-Accordion component that behaves as tabs+content on\n * larger screens and as an accordion component on smaller screens.\n */\nclass TabsToAccordion {\n\n    /**\n     * constructor - this function updates the default options as necessary and \n     * handles the initialization behavior of this component.\n     * \n     * @param {DOM Element} element - main DOM element containing this component\n     * @param {Object} options - optional overrides of default options for this component\n     */\n    constructor (element, options = {}) {\n        // define default options for this component instance\n        this.defaults = {\n            defaultTab: 0,\n            tabContentClass: 'TabsAccordion-content',\n            tabTitleClass: 'TabsAccordion-title',\n            tabNavClass: 'TabsNavigation',\n            tabAccordionClass: 'TabsAccordion',\n            breakpoint: 768, // >= this number of pixels we use tab mode, less = accordion mode\n            scrollAccordion: false,\n            scrollOffset: 10,\n            accordionCanCollapseAll: false\n        }\n        // merge defaults with any options passed through the constructor\n        this.options = Object.assign(this.defaults, options)\n\n        // store the main DOM element and add the init class used to\n        // handle styling of accordion states\n        this.element = element\n        this.element.classList.add('Tabs--init')\n\n        // which tab is currently open/active\n        this.currentTab = null\n\n        // store all the tab content containers so they can be referenced later\n        // for state changes\n        this.tabContentElements = [].slice.call(\n            this.element.querySelectorAll(`.${this.options.tabContentClass}`)\n        )\n\n        // get data from tab DOM element attributes and store it for use\n        // throughout the lifecycle of this component\n        this.fetchTabData()\n\n        // store the accordion container (smaller screens)\n        // and apply appropriate ARIA attribute\n        this.accordion = this.element.querySelector(`.${this.options.tabAccordionClass}`)\n        this.accordion.setAttribute('role', 'tablist')\n\n        // handle events for accordion/smaller screens\n        this.bindAccordionEvents()\n\n        // get the tab container (larger screens)\n        this.tabNavElement = this.element.querySelector(`.${this.options.tabNavClass}`)\n        // get the tab buttons in the container\n        this.tabNavItems = [].slice.call(this.tabNavElement.querySelectorAll('a'))\n\n        // apply the class to handle styling of tab states to the main container\n        this.element.classList.add('Tabs--nav-init')\n\n        // handle events for tabs/larger screens\n        this.bindNavEvents()\n\n        // select the initial tab\n        const startingTab = this.tabContentElements[this.options.defaultTab]\n        this.openTab(startingTab)\n\n        // need a window resize listener if the accordion can be fully collapsed\n        if (this.defaults.accordionCanCollapseAll) {\n            this.attachResizeListener()\n        }\n    }\n\n    /**\n     * fetchTabData - parse the tab markup to retrieve each tab elements Id\n     * and Title and set some appropriate aria attributes on the content DOM elements\n     * and the title DOM elements.\n     */\n    fetchTabData () {\n        // stores data for all tabs in this component\n        this.tabData = []\n\n        let tabElement, tabTitle, tabData\n\n        for(let i=0; i<this.tabContentElements.length; i++) {\n            tabElement = this.tabContentElements[i]\n            tabTitle = tabElement.previousElementSibling\n            tabData = {\n                tabId: tabElement.id,\n                tabTitle: tabTitle.innerText\n            }\n\n            this.tabData.push(tabData)\n\n            // set ARIA attributes for this tab content element\n            tabElement.setAttribute('role', 'tabpanel')\n            tabElement.setAttribute('aria-hidden', 'true')\n\n            // set ARIA attributes for this tab title element\n            tabTitle.setAttribute('role', 'tab')\n            tabTitle.setAttribute('aria-controls', tabData.tabId)\n            this.setAriaSelected(tabTitle, false)\n        }\n    }\n\n    //\n    // Accordion-specific functions\n    //\n\n    /**\n     * bindAccordionEvents - get the accordion title elements and attach\n     * click and keydown listener events.\n     */\n    bindAccordionEvents () {\n        const tabTitles = this.accordion.querySelectorAll(`.${this.options.tabTitleClass}`)\n        for (let i=0; i<tabTitles.length; i++) {\n            tabTitles[i].addEventListener('click', this.onTitleClick.bind(this))\n            tabTitles[i].addEventListener('keydown', this.onTitleKeydown.bind(this))\n        }\n    }\n\n    /**\n     * onTitleClick - handle clicks on accordion titles and toggle the\n     * visibility of the selected accordion item.\n     * \n     * @param {MouseEvent} event \n     */\n    onTitleClick (event) {\n        event.preventDefault()\n        // get the content item associated with this title\n        const tabContent = event.currentTarget.nextElementSibling\n        this.handleAccordion(tabContent)\n    }\n\n    /**\n     * onTitleKeydown - handle key presses on accordion titles and update\n     * the accordion visibility state.\n     * \n     * @param {KeyboardEvent} event \n     */\n    onTitleKeydown (event) {\n        const currentIndex = this.handleKeyPress(event)\n        if (currentIndex !== null) {\n            this.handleAccordion(this.tabContentElements[currentIndex])\n        }\n    }\n\n    /**\n     * handleKeyPress - Given a keyboard event associated with an accordion title button, \n     * determine the index of the accordion content to take action on. Currently supports\n     * showing the active element, going to the previous element and going to the next element.\n     * \n     * @param {KeyboardEvent} event \n     * @return {int} currentIndex - index of tab content element to act on\n     */\n    handleKeyPress (event) {\n        let currentIndex = this.currentTab.position || null\n        const keyCodes = {\n            SPACE: 32,\n            ENTER: 13,\n            LEFT: 37,\n            UP: 38,\n            RIGHT: 39,\n            DOWN: 40\n        }\n\n        switch (event.keyCode) {\n            // show selected tab\n            case keyCodes.SPACE:\n            case keyCodes.ENTER:\n                currentIndex = this.handleEnter(currentIndex)\n                break\n\n            // show previous tab\n            case keyCodes.LEFT:\n            case keyCodes.UP:\n                currentIndex--\n                if (currentIndex < 0) {\n                    currentIndex = this.tabData.length - 1\n                }\n                break\n            \n            // show next tab\n            case keyCodes.RIGHT:\n            case keyCodes.DOWN:\n                currentIndex++\n                if (currentIndex >= this.tabData.length) {\n                    currentIndex = 0\n                }\n                break\n\n            default:\n                currentIndex = null\n        }\n\n        return currentIndex\n    }\n\n    /**\n     * handleEnter - return the index of the active tab content element. Return the\n     * given index if the accordion title being acted on is the one associated with\n     * already open content.\n     * \n     * @param {int} currentIndex \n     */\n    handleEnter (currentIndex) {\n        const tab = document.getElementById(document.activeElement.getAttribute('aria-controls'))\n        if (tab !== this.currentTab.contentElement) {\n            currentIndex = this.tabContentElements.indexOf(tab)\n        }\n        return currentIndex\n    }\n\n    /**\n     * handleAccordion - takes a given accordion content element and shows it if it's\n     * hidden. If the content is visible and collapsing all accordion content is enabled, \n     * hide the given accordion content.\n     * \n     * @param {DOM Element} tabContentElement - tab content element to show or hide\n     */\n    handleAccordion (tabContentElement) {\n        if (!this.isCurrentTab(tabContentElement)) {\n            this.openAccordion(tabContentElement)\n        } else {\n            // this is conditional because using this feature means listening for\n            // window resize events to show the last opened tab if none are open\n            // and the user changes window width to change the style from accordion\n            // to tab mode -- we need to avoid having no content visible if we show\n            // the tab mode.\n            if (this.defaults.accordionCanCollapseAll)\n                this.closeTab()\n        }\n    }\n\n    /**\n     * openAccordion - switch to new tab content by hiding the open tab and\n     * showing the activated tab. Scroll the accordion if the behavior is enabled.\n     * \n     * @param {DOM Element} tabContentElement - tab content element to show\n     */\n    openAccordion (tabContentElement) {\n        this.closeTab()\n        this.openTab(tabContentElement)\n        this.currentTab.titleElement.focus()\n\n        if (this.options.scrollAccordion) {\n            window.scroll(0, this.currentTab.titleElement.offsetTop - this.options.scrollOffset)\n        }\n    }\n\n    //\n    // Tab-specific functions\n    //\n\n    /**\n     * bindNavEvents - add the click event listeners to the tab nav buttons.\n     */\n    bindNavEvents () {\n        for(let i=0; i<this.tabNavItems.length; i++) {\n            this.tabNavItems[i].addEventListener('click', this.onTabClick.bind(this))\n        }\n    }\n\n    /**\n     * onTabClick - handle clicks of the tab button. If the button clicked is\n     * not associated with the currently-expanded tab, close the current tab\n     * and open the newly-selected tab and content.\n     *\n     * @param {MouseEvent} event - the tab button click event.\n     */\n    onTabClick (event) {\n        event.preventDefault()\n        const target = this.element.querySelector(event.currentTarget.hash)\n        if (!this.isCurrentTab(target)) {\n            this.closeTab()\n            this.openTab(target)\n        }\n    }\n\n    /**\n     * updateTabNav - set the aria attributes of the button for the newly\n     * opened tab content.\n     */\n    updateTabNav () {\n        const tab = this.tabNavItems[this.currentTab.position]\n        this.setAriaSelected(tab)\n    }\n\n    /**\n     * closeTab - if there is an open tab, hide it and set its aria attributes appropriately.\n     */\n    closeTab () {\n        if (this.currentTab) {\n            this.currentTab.contentElement.setAttribute('aria-hidden', 'true')\n            this.setAriaSelected(this.currentTab.titleElement, false)\n            this.setAriaSelected(this.tabNavItems[this.currentTab.position], false)\n            this.previousTab = this.currentTab\n            this.currentTab = null\n        }\n    }\n\n    /**\n     * openTab - set the stored currentTab object properties based on the given\n     * tabContentElement (DOM element), update the aria attributes of this element\n     * and the associated title element and trigger the function to update the\n     * tab button aria attirbutes.\n     *\n     * @param {DOM element} tabContentElement - the DOM element representing the tab content to display/expand.\n     */\n    openTab (tabContentElement) {\n        this.previousTab = this.currentTab\n        this.currentTab = {\n            contentElement: tabContentElement,\n            titleElement: tabContentElement.previousElementSibling,\n            position: this.tabContentElements.indexOf(tabContentElement)\n        }\n        tabContentElement.setAttribute('aria-hidden', 'false')\n        this.setAriaSelected(this.currentTab.titleElement)\n        this.updateTabNav()\n    }\n\n    //\n    //  \n    //\n\n    /**\n     * attachResizeListener - attaches a custom (throttled) window resize listener\n     * to open the most recently-opened tab when the user has collapsed all content\n     * when this component is in Accordion mode and the screen is resized to switch\n     * into Tab mode because we don't ever want to have all tabs hidden when this\n     * component is in Tab mode.\n     */\n    attachResizeListener () {\n        const throttle = (type, name) => {\n            let running = false\n            const func = () => {\n                if (running) {\n                    return\n                }\n                running = true\n                requestAnimationFrame(() => {\n                    window.dispatchEvent(new CustomEvent(name))\n                    running = false\n                })\n            }\n            window.addEventListener(type, func)\n        }\n\n        throttle('resize', 'optimizedResize')\n\n        window.addEventListener('optimizedResize', () => {\n            // if we're in tab mode and no tab content is visible, open the previously open tab\n            if (window.innerWidth >= this.defaults.breakpoint && !this.currentTab && this.previousTab) {\n                this.openTab(this.previousTab.contentElement)\n            }\n        })\n    }\n\n    //\n    // Helper functions\n    //\n\n    /**\n     * isCurrentTab - determine if the given element is the currently\n     * selected tab element return boolean.\n     *\n     * @param {DOM element} tabContentElement - a DOM element to compare to the currently-selected tab content DOM element\n     * @return {Boolean} True if the given tabContentElement is the current tabContentElement\n     */\n    isCurrentTab (tabContentElement) {\n        return !this.currentTab ? false : this.currentTab.contentElement === tabContentElement\n    }\n\n    /**\n     * setAriaSelected - Helper function to set the aria-selected and aria-expanded attributes\n     * of a given element.\n     *\n     * @param {DOM element} element - The DOM element that will have aria attributes updated\n     * @param {Boolean} selected - aria attribute values will be set to this Boolean\n     */\n    setAriaSelected (element, selected = true) {\n        element.setAttribute('aria-selected', selected)\n        element.setAttribute('aria-expanded', selected)\n    }\n}\n\nexport default TabsToAccordion\n","import TabsToAccordion from './TabsToAccordion'\n\nconst opts = {\n    \n}\nconst container = document.getElementById(\"Tabs\")\nnew TabsToAccordion(container, opts)\n\n/*\n\n// default options for TabsToAccordion\n\nopts = {\n    defaultTab: 0,\n    tabContentClass: 'TabsAccordion-content',\n    tabTitleClass: 'TabsAccordion-title',\n    tabNavClass: 'TabsNavigation',\n    tabAccordionClass: 'TabsAccordion',\n    breakpoint: 768, // >= this number of pixels we use tab mode, less = accordion mode\n    scrollAccordion: false,\n    scrollOffset: 10,\n    accordionCanCollapseAll: false\n}\n\n*/\n"],"names":["TabsToAccordion","element","options","defaults","Object","assign","classList","add","currentTab","tabContentElements","slice","call","querySelectorAll","tabContentClass","fetchTabData","accordion","querySelector","tabAccordionClass","setAttribute","bindAccordionEvents","tabNavElement","tabNavClass","tabNavItems","bindNavEvents","startingTab","defaultTab","openTab","accordionCanCollapseAll","attachResizeListener","tabData","tabElement","tabTitle","i","length","previousElementSibling","id","innerText","push","tabId","setAriaSelected","tabTitles","tabTitleClass","addEventListener","onTitleClick","bind","onTitleKeydown","event","preventDefault","tabContent","currentTarget","nextElementSibling","handleAccordion","currentIndex","handleKeyPress","position","keyCodes","keyCode","SPACE","ENTER","handleEnter","LEFT","UP","RIGHT","DOWN","tab","document","getElementById","activeElement","getAttribute","contentElement","indexOf","tabContentElement","isCurrentTab","openAccordion","closeTab","titleElement","focus","scrollAccordion","scroll","offsetTop","scrollOffset","onTabClick","target","hash","previousTab","updateTabNav","throttle","type","name","running","func","dispatchEvent","CustomEvent","window","innerWidth","breakpoint","selected","opts","container"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAMMA;;;;;;;;;6BASWC,OAAb,EAAoC;YAAdC,OAAc,uEAAJ,EAAI;;;;aAE3BC,QAAL,GAAgB;wBACA,CADA;6BAEK,uBAFL;2BAGG,qBAHH;yBAIC,gBAJD;+BAKO,eALP;wBAMA,GANA;6BAOK,KAPL;0BAQE,EARF;qCASa;;SAT7B,CAYA,KAAKD,OAAL,GAAeE,OAAOC,MAAP,CAAc,KAAKF,QAAnB,EAA6BD;;;;SAA5C,CAIA,KAAKD,OAAL,GAAeA,OAAf;aACKA,OAAL,CAAaK,SAAb,CAAuBC,GAAvB,CAA2B;;;UAG3B,KAAKC,UAAL,GAAkB,IAAlB;;;;aAIKC,kBAAL,GAA0B,GAAGC,KAAH,CAASC,IAAT,CACtB,KAAKV,OAAL,CAAaW,gBAAb,OAAkC,KAAKV,OAAL,CAAaW,eAA/C;;;;SADJ,CAMA,KAAKC;;;;WAIL,KAAKC,SAAL,GAAiB,KAAKd,OAAL,CAAae,aAAb,OAA+B,KAAKd,OAAL,CAAae,iBAA5C,CAAjB;aACKF,SAAL,CAAeG,YAAf,CAA4B,MAA5B,EAAoC;;;UAGpC,KAAKC;;;WAGL,KAAKC,aAAL,GAAqB,KAAKnB,OAAL,CAAae,aAAb,OAA+B,KAAKd,OAAL,CAAamB;;SAAjE,CAEA,KAAKC,WAAL,GAAmB,GAAGZ,KAAH,CAASC,IAAT,CAAc,KAAKS,aAAL,CAAmBR,gBAAnB,CAAoC,GAApC;;;SAAjC,CAGA,KAAKX,OAAL,CAAaK,SAAb,CAAuBC,GAAvB,CAA2B;;;UAG3B,KAAKgB;;;WAGL,IAAMC,cAAc,KAAKf,kBAAL,CAAwB,KAAKP,OAAL,CAAauB,UAArC,CAApB;aACKC,OAAL,CAAaF;;;UAGb,IAAI,KAAKrB,QAAL,CAAcwB,uBAAlB,EAA2C;iBAClCC,oBAAL;;;;;;;;;;;;;uCASQ;;iBAEPC,OAAL,GAAe,EAAf;;gBAEIC,mBAAJ;gBAAgBC,iBAAhB;gBAA0BF,gBAA1B;;iBAEI,IAAIG,IAAE,CAAV,EAAaA,IAAE,KAAKvB,kBAAL,CAAwBwB,MAAvC,EAA+CD,GAA/C,EAAoD;6BACnC,KAAKvB,kBAAL,CAAwBuB,CAAxB,CAAb;2BACWF,WAAWI,sBAAtB;0BACU;2BACCJ,WAAWK,EADZ;8BAEIJ,SAASK;iBAFvB;;qBAKKP,OAAL,CAAaQ,IAAb,CAAkBR;;;kBAGlBC,WAAWZ,YAAX,CAAwB,MAAxB,EAAgC,UAAhC;2BACWA,YAAX,CAAwB,aAAxB,EAAuC;;;kBAGvCa,SAASb,YAAT,CAAsB,MAAtB,EAA8B,KAA9B;yBACSA,YAAT,CAAsB,eAAtB,EAAuCW,QAAQS,KAA/C;qBACKC,eAAL,CAAqBR,QAArB,EAA+B,KAA/B;;;;;;;;;;;;;;;8CAYe;gBACbS,YAAY,KAAKzB,SAAL,CAAeH,gBAAf,OAAoC,KAAKV,OAAL,CAAauC,aAAjD,CAAlB;iBACK,IAAIT,IAAE,CAAX,EAAcA,IAAEQ,UAAUP,MAA1B,EAAkCD,GAAlC,EAAuC;0BACzBA,CAAV,EAAaU,gBAAb,CAA8B,OAA9B,EAAuC,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAvC;0BACUZ,CAAV,EAAaU,gBAAb,CAA8B,SAA9B,EAAyC,KAAKG,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAzC;;;;;;;;;;;;;qCAUME,OAAO;kBACXC;;eAEN,IAAMC,aAAaF,MAAMG,aAAN,CAAoBC,kBAAvC;iBACKC,eAAL,CAAqBH,UAArB;;;;;;;;;;;;uCASYF,OAAO;gBACbM,eAAe,KAAKC,cAAL,CAAoBP,KAApB,CAArB;gBACIM,iBAAiB,IAArB,EAA2B;qBAClBD,eAAL,CAAqB,KAAK1C,kBAAL,CAAwB2C,YAAxB,CAArB;;;;;;;;;;;;;;;uCAYQN,OAAO;gBACfM,eAAe,KAAK5C,UAAL,CAAgB8C,QAAhB,IAA4B,IAA/C;gBACMC,WAAW;uBACN,EADM;uBAEN,EAFM;sBAGP,EAHO;oBAIT,EAJS;uBAKN,EALM;sBAMP;aANV;;oBASQT,MAAMU,OAAd;;qBAESD,SAASE,KAAd;qBACKF,SAASG,KAAd;mCACmB,KAAKC,WAAL,CAAiBP,YAAjB,CAAf;;;;qBAICG,SAASK,IAAd;qBACKL,SAASM,EAAd;;wBAEQT,eAAe,CAAnB,EAAsB;uCACH,KAAKvB,OAAL,CAAaI,MAAb,GAAsB,CAArC;;;;;qBAKHsB,SAASO,KAAd;qBACKP,SAASQ,IAAd;;wBAEQX,gBAAgB,KAAKvB,OAAL,CAAaI,MAAjC,EAAyC;uCACtB,CAAf;;;;;mCAKW,IAAf;;;mBAGDmB,YAAP;;;;;;;;;;;;;oCAUSA,cAAc;gBACjBY,MAAMC,SAASC,cAAT,CAAwBD,SAASE,aAAT,CAAuBC,YAAvB,CAAoC,eAApC,CAAxB,CAAZ;gBACIJ,QAAQ,KAAKxD,UAAL,CAAgB6D,cAA5B,EAA4C;+BACzB,KAAK5D,kBAAL,CAAwB6D,OAAxB,CAAgCN,GAAhC,CAAf;;mBAEGZ,YAAP;;;;;;;;;;;;;wCAUamB,mBAAmB;gBAC5B,CAAC,KAAKC,YAAL,CAAkBD,iBAAlB,CAAL,EAA2C;qBAClCE,aAAL,CAAmBF,iBAAnB;aADJ,MAEO;;;;;;oBAMC,KAAKpE,QAAL,CAAcwB,uBAAlB,EACI,KAAK+C,QAAL;;;;;;;;;;;;;sCAUGH,mBAAmB;iBACzBG,QAAL;iBACKhD,OAAL,CAAa6C,iBAAb;iBACK/D,UAAL,CAAgBmE,YAAhB,CAA6BC,KAA7B;;gBAEI,KAAK1E,OAAL,CAAa2E,eAAjB,EAAkC;uBACvBC,MAAP,CAAc,CAAd,EAAiB,KAAKtE,UAAL,CAAgBmE,YAAhB,CAA6BI,SAA7B,GAAyC,KAAK7E,OAAL,CAAa8E,YAAvE;;;;;;;;;;;;;;wCAWS;iBACT,IAAIhD,IAAE,CAAV,EAAaA,IAAE,KAAKV,WAAL,CAAiBW,MAAhC,EAAwCD,GAAxC,EAA6C;qBACpCV,WAAL,CAAiBU,CAAjB,EAAoBU,gBAApB,CAAqC,OAArC,EAA8C,KAAKuC,UAAL,CAAgBrC,IAAhB,CAAqB,IAArB,CAA9C;;;;;;;;;;;;;;mCAWIE,OAAO;kBACTC,cAAN;gBACMmC,SAAS,KAAKjF,OAAL,CAAae,aAAb,CAA2B8B,MAAMG,aAAN,CAAoBkC,IAA/C,CAAf;gBACI,CAAC,KAAKX,YAAL,CAAkBU,MAAlB,CAAL,EAAgC;qBACvBR,QAAL;qBACKhD,OAAL,CAAawD,MAAb;;;;;;;;;;;uCAQQ;gBACNlB,MAAM,KAAK1C,WAAL,CAAiB,KAAKd,UAAL,CAAgB8C,QAAjC,CAAZ;iBACKf,eAAL,CAAqByB,GAArB;;;;;;;;;mCAMQ;gBACJ,KAAKxD,UAAT,EAAqB;qBACZA,UAAL,CAAgB6D,cAAhB,CAA+BnD,YAA/B,CAA4C,aAA5C,EAA2D,MAA3D;qBACKqB,eAAL,CAAqB,KAAK/B,UAAL,CAAgBmE,YAArC,EAAmD,KAAnD;qBACKpC,eAAL,CAAqB,KAAKjB,WAAL,CAAiB,KAAKd,UAAL,CAAgB8C,QAAjC,CAArB,EAAiE,KAAjE;qBACK8B,WAAL,GAAmB,KAAK5E,UAAxB;qBACKA,UAAL,GAAkB,IAAlB;;;;;;;;;;;;;;;gCAYC+D,mBAAmB;iBACnBa,WAAL,GAAmB,KAAK5E,UAAxB;iBACKA,UAAL,GAAkB;gCACE+D,iBADF;8BAEAA,kBAAkBrC,sBAFlB;0BAGJ,KAAKzB,kBAAL,CAAwB6D,OAAxB,CAAgCC,iBAAhC;aAHd;8BAKkBrD,YAAlB,CAA+B,aAA/B,EAA8C,OAA9C;iBACKqB,eAAL,CAAqB,KAAK/B,UAAL,CAAgBmE,YAArC;iBACKU,YAAL;;;;;;;;;;;;;;;;;+CAcoB;;;gBACdC,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAOC,IAAP,EAAgB;oBACzBC,UAAU,KAAd;oBACMC,OAAO,SAAPA,IAAO,GAAM;wBACXD,OAAJ,EAAa;;;8BAGH,IAAV;0CACsB,YAAM;+BACjBE,aAAP,CAAqB,IAAIC,WAAJ,CAAgBJ,IAAhB,CAArB;kCACU,KAAV;qBAFJ;iBALJ;uBAUO9C,gBAAP,CAAwB6C,IAAxB,EAA8BG,IAA9B;aAZJ;;qBAeS,QAAT,EAAmB,iBAAnB;;mBAEOhD,gBAAP,CAAwB,iBAAxB,EAA2C,YAAM;;oBAEzCmD,OAAOC,UAAP,IAAqB,MAAK3F,QAAL,CAAc4F,UAAnC,IAAiD,CAAC,MAAKvF,UAAvD,IAAqE,MAAK4E,WAA9E,EAA2F;0BAClF1D,OAAL,CAAa,MAAK0D,WAAL,CAAiBf,cAA9B;;aAHR;;;;;;;;;;;;;;;;;qCAmBUE,mBAAmB;mBACtB,CAAC,KAAK/D,UAAN,GAAmB,KAAnB,GAA2B,KAAKA,UAAL,CAAgB6D,cAAhB,KAAmCE,iBAArE;;;;;;;;;;;;;wCAUatE,SAA0B;gBAAjB+F,QAAiB,uEAAN,IAAM;;oBAC/B9E,YAAR,CAAqB,eAArB,EAAsC8E,QAAtC;oBACQ9E,YAAR,CAAqB,eAArB,EAAsC8E,QAAtC;;;;IAIR;;ACrYA,IAAMC,OAAO,EAAb;AAGA,IAAMC,YAAYjC,SAASC,cAAT,CAAwB,MAAxB,CAAlB;AACA,IAAIlE,eAAJ,CAAoBkG,SAApB,EAA+BD,IAA/B;;;;;;;;;;;;;;;;;;"}